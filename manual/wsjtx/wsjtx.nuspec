<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>wsjtx</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>2.0.1</version>
    <packageSourceUrl>https://github.com/chtof/chocolatey-packages/tree/master/manual/wsjtx</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>chtof</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>WSJT-X</title>
    <authors>Joe Taylor K1JT</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://physics.princeton.edu/pulsar/k1jt/wsjtx.html</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/chtof/chocolatey-packages/master/manual/wsjtx/wsjtx.png</iconUrl>
    <copyright>©2001-2019  by Joe Taylor, K1JT</copyright>
    <!-- If there is a license Url available, it is required for the community feed -->
    <licenseUrl>https://physics.princeton.edu/pulsar/k1jt/</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://physics.princeton.edu/pulsar/k1jt/</projectSourceUrl>
    <docsUrl>https://physics.princeton.edu/pulsar/k1jt/wsjtx.html</docsUrl>
    <bugTrackerUrl>https://physics.princeton.edu/pulsar/k1jt/support.html</bugTrackerUrl>
    <tags>wsjtx HAM radio amateur FT8 JT4 JT9 JT65 QRA64 ISCAT MSK144 WSPR echo</tags>
    <summary>WSJT-X - Digital Modes for Weak Signal Communicaitons in Amateur Radio</summary>
    <description>
WSJT-X implements communication protocols or "modes" called FT8, JT4, JT9, JT65, QRA64, ISCAT, MSK144, and WSPR, as well as one called Echo for detecting and measuring your own radio signals reflected from the Moon.  These modes were all designed for making reliable, confirmed QSOs under extreme weak-signal conditions.  

JT4, JT9, JT65, and QRA64 use nearly identical message structure and source encoding (the efficient compression of standard messages used for minimal QSOs). They use timed 60-second T/R sequences synchronized with UTC.  JT65 and QRA64 were designed for EME ("moonbounce") on the VHF/UHF bands; JT65 has also proved popular and effective for worldwide QRP communication at HF.  JT9 is optimized for the LF, MF, and HF bands.  It  is about 2 dB more sensitive than JT65 while using less than 10% of the bandwidth.  With either JT9 or JT65, world-wide QSOs are possible with power levels of a few watts and compromise antennas.  JT4 and QRA64 are optimized for EME on the VHF and higher bands, and especially the microwave bands from 2.3 to 24 GHz.  

FT8 is operationally similar but uses T/R cycles only 15 s long.  MSK144 is designed for Meteor Scatter on the VHF bands.  These modes offer enhanced message formats with support for nonstandard callsigns and some popular contests.

As described more fully on its own page, WSPR mode implements a protocol designed for probing potential propagation paths with low-power transmissions.  WSPR is now fully implemented within WSJT-X, including programmable "band-hopping". 
</description>
    <releaseNotes>https://physics.princeton.edu/pulsar/k1jt/Release_Notes.txt</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension
         - You want to use Get-UninstallRegistryKey on less than 0.9.10 (in chocolateyUninstall.ps1)
         - You want to use Get-PackageParameters and on less than 0.11.0
         - You want to take advantage of other functions in the core community maintainer's team extension package
    -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
